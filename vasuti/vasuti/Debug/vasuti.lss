
vasuti.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000844  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ac  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002aa  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	4f c0       	rjmp	.+158    	; 0xe0 <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	6b c0       	rjmp	.+214    	; 0x182 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:

volatile int i=0,uzem=0;

int main(void)
{
	sei();  //global interrupts enable
  ae:	78 94       	sei
	TIMSK=1; //Timer0 Interrupt enable
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 7;  //Timer0 on
  b4:	87 e0       	ldi	r24, 0x07	; 7
  b6:	83 bf       	out	0x33, r24	; 51
    while (1) 
    {
		if (PING==2)
  b8:	e3 e6       	ldi	r30, 0x63	; 99
  ba:	f0 e0       	ldi	r31, 0x00	; 0
		{
			uzem=1;
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
	sei();  //global interrupts enable
	TIMSK=1; //Timer0 Interrupt enable
	TCCR0 = 7;  //Timer0 on
    while (1) 
    {
		if (PING==2)
  c0:	80 81       	ld	r24, Z
  c2:	82 30       	cpi	r24, 0x02	; 2
  c4:	29 f4       	brne	.+10     	; 0xd0 <main+0x22>
		{
			uzem=1;
  c6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
  ca:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  ce:	f8 cf       	rjmp	.-16     	; 0xc0 <main+0x12>
		}else if (PING==1)
  d0:	80 81       	ld	r24, Z
  d2:	81 30       	cpi	r24, 0x01	; 1
  d4:	a9 f7       	brne	.-22     	; 0xc0 <main+0x12>
		{
			uzem=0;
  d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  de:	f0 cf       	rjmp	.-32     	; 0xc0 <main+0x12>

000000e0 <__vector_16>:
		}
	}
}

ISR(TIMER0_OVF_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
	i++;
  ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
  f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i+0x1>
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i>
	if (uzem == 0)
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 108:	89 2b       	or	r24, r25
 10a:	b9 f4       	brne	.+46     	; 0x13a <__vector_16+0x5a>
	{	PORTD=0;
 10c:	12 ba       	out	0x12, r1	; 18
		if(i>=43) //ha eltelt 0.7 mp
 10e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 112:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 116:	8b 97       	sbiw	r24, 0x2b	; 43
 118:	6c f1       	brlt	.+90     	; 0x174 <__vector_16+0x94>
		{
			i = 0;
 11a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 11e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
			if(PORTB==16)
 122:	88 b3       	in	r24, 0x18	; 24
 124:	80 31       	cpi	r24, 0x10	; 16
 126:	11 f4       	brne	.+4      	; 0x12c <__vector_16+0x4c>
				{
				PORTB=0;
 128:	18 ba       	out	0x18, r1	; 24
 12a:	24 c0       	rjmp	.+72     	; 0x174 <__vector_16+0x94>
				}else { i=0; PORTB=16;}
 12c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 130:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
 134:	80 e1       	ldi	r24, 0x10	; 16
 136:	88 bb       	out	0x18, r24	; 24
 138:	1d c0       	rjmp	.+58     	; 0x174 <__vector_16+0x94>
		}
	}else if (uzem ==1 )
 13a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 13e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	b9 f4       	brne	.+46     	; 0x174 <__vector_16+0x94>
			{ PORTB=0;
 146:	18 ba       	out	0x18, r1	; 24
				if (i>=43)
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 150:	8b 97       	sbiw	r24, 0x2b	; 43
 152:	84 f0       	brlt	.+32     	; 0x174 <__vector_16+0x94>
				{	if (PORTD==64)
 154:	82 b3       	in	r24, 0x12	; 18
 156:	80 34       	cpi	r24, 0x40	; 64
 158:	39 f4       	brne	.+14     	; 0x168 <__vector_16+0x88>
					{
					i=0;		
 15a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 15e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
					PORTD=128;
 162:	80 e8       	ldi	r24, 0x80	; 128
 164:	82 bb       	out	0x12, r24	; 18
 166:	06 c0       	rjmp	.+12     	; 0x174 <__vector_16+0x94>
					}
				 else {i=0; PORTD=64;}
 168:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 16c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	82 bb       	out	0x12, r24	; 18
				}
			}
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
